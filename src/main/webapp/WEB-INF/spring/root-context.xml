<?xml version="1.0" encoding="UTF-8"?>


<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!-- bean 태그를 새로 등록할 때 id와 class 속성은 필수! -->
	<!-- id : bean의 이름. 관례상 클래스 이름의 마지막 부분만 소문자로 씀
		, class : Spring Beans Container에 등록되는 클래스 이름 -->
	<!-- description : 설명. (optional) -->
	<!-- property 태그는 기본적으로 name 속성을 갖고 value와 ref 속성도 갖는다. -->
	<!-- property : 클래스가 모델링된 객체의 필드. name : 필드의 이름, value : 필드의 값 -->
	<!-- 자바 빈즈 규약에 따라 필드는 private이기 때문에 사실상 property는 setter메서드를 호출해서 값을 넣음 -->
	<!-- idleTimeout : ms시간 동안  -->
	
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<description>HikariCP Configuration</description>

		<!-- JDBC -->
		<!-- <property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@db202106301639_high?TNS_ADMIN=C:/opt/OracleCloudWallet/ATP"/>
		-->
		<!--  JDBC DriverSpy -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@db202106301639_high?TNS_ADMIN=C:/OPT/FilmeeCloudWallet/ATP"/>		
	
		<property name="username" value="FILMEE"/>
		<property name="password" value="Oracle12345!!!"/>

		<property name="maximumPoolSize" value="10"/>
		<property name="minimumIdle" value="2"/>
		<property name="idleTimeout" value="10000"/>
		<property name="connectionTimeout" value="1000"/>
		<property name="connectionTestQuery" value="SELECT 1 FROM dual"/>
		<property name="dataSourceJNDI" value="jdbc/HikariCP"/>
	</bean>

	<bean id="hikariDataSource"
		  class="com.zaxxer.hikari.HikariDataSource"
		  destroy-method="close">
		<description>HikariCP DataSource</description>

		<constructor-arg ref="hikariConfig"/>
		<!-- 매개변수가 필요한 생성자에 ref값을 인자로 전달함 -->
	</bean>
	
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
	         <!-- 최대업로드 가능한 바이트크기 -->

         <property name="maxUploadSize" value="52428800" />



         <!-- 디스크에 임시 파일을 생성하기 전에 메모리에 보관할수있는 최대 바이트 크기 -->

         <!-- property name="maxInMemorySize" value="52428800" / -->

         <!-- defaultEncoding -->
         <property name="defaultEncoding" value="utf-8" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="hikariDataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
			<!-- value=classpath : classpath에서 뒤의 resource를 찾아라 -->
		<!-- <property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property> -->
			<!-- ** : 모든 하위폴더, *~ : 로 끝나는 모든 파일  -->
	</bean>	

	<mybatis-spring:scan base-package="com.filmee.myapp.mapper" />
		<!-- 이걸 추가하면 해당 경로(히위패키지까지)의 인터페이스를 찾아 프록시 객체를 쉽게 받을 수 있다.
			인터페이스의 추상 메서드 중 myBatis 어노테이션을(@Select, @iInsert 등..) 갖고 있거나
			resource 폴더의 같은 FQCN으로 .xml을 갖고 있는 추상메서드를 수행시킬 수 있다.
			==> SQL 문장이 있어야한다는 뜻!!! -->

		<!-- 1. 해당 경로의 인터페이스는 myBatis-config에 <mapper class=FQCN을 추가하지 않아도 된다.
			 2. MapperProxy 객체를 수동으로 받지 않아도 된다. -->
			 	

</beans>
